@model ChatManager.Models.User

@{
    ViewBag.Title = "Profil";
    bool subscribing = Model.Id == 0;
    string pageTitle = subscribing ? "Inscription" : "Profil";
    string formSubmitCaption = subscribing ? "S'inscrire" : "Enregistrer";
    bool asAdmin = false;
    string type = "none";

    if (Session["AsAdmin"] != null)
    {
        asAdmin = (bool)Session["AsAdmin"];
    }

    string displayType = asAdmin ? "none" : "block";

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
<div class="form-horizontal">

    <fieldset class="formField">
        <div class="legend">Identification</div>
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.FirstName) } })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        <br />
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.LastName) } })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </fieldset>

    <div class="legend">@Html.DisplayNameFor(model => model.AvatarImageData)</div>
    @Helper.ImageUploader(Model.Id, "AvatarImageData", Model.GetAvatarURL(), "~/Images_Data/Loading_icon.gif", "Cliquez pour choisir votre avatar")
    @Html.ValidationMessageFor(model => model.AvatarImageData, "", new { @class = "text-danger" })

    <fieldset class="formField" style="display:@displayType">
        <div class="legend">@Html.DisplayNameFor(model => model.GenderId)</div>
        @Helper.ListToRadioButtonGroup("GenderId", (SelectList)ViewBag.Genders, Model.GenderId)
        @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
    </fieldset>




    <fieldset class="formField">
        <div class="legend">@Html.DisplayNameFor(model => model.Email)</div>
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Email) } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        <br />
        @Html.EditorFor(model => model.ConfirmEmail, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmEmail) } })
        @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new { @class = "text-danger" })
    </fieldset>

    @{
        if (asAdmin)
        {
            <fieldset class="formField" style="display:block">
                <div class="legend">
                    @Html.DisplayNameFor(model => model.Verified)
                    @Html.CheckBoxFor(model => model.Verified, new { id = "verified" })
                </div>
                <div class="legend">
                    @Html.DisplayNameFor(model => model.Blocked)
                    @Html.CheckBoxFor(model => model.Blocked, new { id = "blocked" })
                </div>
            </fieldset>

            <fieldset class="formField" style="display:none">
                <div style="display:grid; align-items:center; grid-template-columns:auto 80px;">
                    <div class="legend">
                        @Html.DisplayNameFor(model => model.Password)
                    </div>
                    <div>
                        @if (!subscribing)
                        {
                            <label for="changePassword">Modifier</label>
                            <input type="checkbox" name="changePassword" id="changePassword" style="margin-top:-5px;" />
                        }
                    </div>
                </div>

                <div style="display:grid; grid-template-columns:auto 0px">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Password) } })
                    @Helper.Icon("toggleShowPassword", "fa-eye-slash", "Affichier le mot de passe")
                </div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                <br />
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmPassword) } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </fieldset>

            <fieldset class="formField" style="display:block">
                <div class="legend">@Html.DisplayNameFor(model => model.UserTypeId)</div>
                @Helper.ListToRadioButtonGroup("UserTypeId", (SelectList)ViewBag.Types, Model.UserTypeId)
                @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
            </fieldset>


        }
        else
        {
            <fieldset class="formField" style="display:none">
                <div class="legend">
                    @Html.DisplayNameFor(model => model.Verified)
                    @Html.CheckBoxFor(model => model.Verified, new { id = "verified" })
                </div>
                <div class="legend">
                    @Html.DisplayNameFor(model => model.Blocked)
                    @Html.CheckBoxFor(model => model.Blocked, new { id = "blocked" })
                </div>
            </fieldset>

            <fieldset class="formField" style="display:block">
                <div style="display:grid; align-items:center; grid-template-columns:auto 80px;">
                    <div class="legend">
                        @Html.DisplayNameFor(model => model.Password)
                    </div>
                    <div>
                        @if (!subscribing)
                        {
                            <label for="changePassword">Modifier</label>
                            <input type="checkbox" name="changePassword" id="changePassword" style="margin-top:-5px;" />
                        }
                    </div>
                </div>

                <div style="display:grid; grid-template-columns:auto 0px">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Password) } })
                    @Helper.Icon("toggleShowPassword", "fa-eye-slash", "Affichier le mot de passe")
                </div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                <br />
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmPassword) } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </fieldset>

            <fieldset class="formField" style="display:none">
                <div class="legend">@Html.DisplayNameFor(model => model.UserTypeId)</div>
                @Helper.ListToRadioButtonGroup("UserTypeId", (SelectList)ViewBag.Types, Model.UserTypeId)
                @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
            </fieldset>
        }
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@formSubmitCaption" class="btn btn-default" />
        </div>
    </div>
</div>


    <script>
            //window.addEventListener("DOMContentLoaded", () => {
            //    document.querySelector("#verified").addEventListener("change", (e) => {
            //        if (e.target.checked) {
            //            document.querySelector("#blocked").checked = false;
            //        }
            //    });
            //    document.querySelector("#blocked").addEventListener("change", (e) => {
            //        if (e.target.checked) {
            //            document.querySelector("#verified").checked = false;
            //        }
            //    });
            //});
    </script>

}

