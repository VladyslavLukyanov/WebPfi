@model IEnumerable<ChatManager.Models.Message>
@using ChatManager.Models

@{
    List<User> users = DB.Users.ToList();
    User userSession = OnlineUsers.GetSessionUser();
    DateTime date = DateTime.Now;
    bool first = true;
    string chemin = Server.MapPath("~/App_Data/Messages.json");
    string cheminFriend = Server.MapPath("~/App_Data/Friends.json");
    Message.RemplirListeMessages(chemin);
    var copy = Message.Messages.ToList();

    if (userSession != null && !userSession.IsAdmin)
    {
        User friend = DB.Users.Get((int)Session["FriendId"]);
        var friendshipInfo = Friendship.IsFriendShipOnWait((int)Session["FriendId"], userSession.Id, cheminFriend);
        friend = DB.Friends.Get(friendshipInfo.f) != null ? friend : null;

        if (friend != null)
        {
            var url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);

            <div class="messagesHeader">
                <h4>Conversation avec </h4> <br />
                <div style="display:flex; align-items:center;">
                    <div class="UserMediumAvatar" style="background: url(@url.Content(friend.GetAvatarURL()));">
                    </div>
                    <div style="margin-left:10px;">@friend.FirstName @friend.LastName</div>
                </div>
            </div>

            foreach (var message in copy)
            {
                bool isSent = message.IdExpediteur == userSession.Id && message.IdReceveur == (int)Session["FriendId"];
                bool isReceived = message.IdExpediteur == (int)Session["FriendId"] && message.IdReceveur == userSession.Id;

                if (isSent || isReceived)
                {
                    bool isFriendId = (int)Session["FriendId"] == message.IdReceveur;
                    bool isUserSessionId = userSession.Id == message.IdReceveur;

                    if ((isFriendId && isSent && first) || (isUserSessionId && isReceived && first))
                    {
                        date = message.Date;
                        <div class="messageTime">@date.ToString("dd MMMM yyyy - HH:mm")</div>
                        first = false;
                    }
                    else if ((isFriendId && isSent && !first) || (isUserSessionId && isReceived && !first))
                    {
                        TimeSpan timeDifference = message.Date - date;
                        if (timeDifference.TotalMilliseconds > 30 * 60 * 1000)
                        {
                            date = message.Date;
                            <div class="messageTime">@date.ToString("dd MMMM yyyy - HH:mm")</div>
                        }
                    }

                    <div class="@(isSent ? "sentLayout" : "receivedLayout")">
                        <div class="@(isSent ? "sent" : "received")" title="@message.Date" id="@message.Id">
                            <span class="@(isSent ? "spanSent" : "")" id="span+@message.Id" data-message-id="@message.Id" style="max-width:150px !important; overflow:hidden !important; white-space:nowrap; text-overflow:ellipsis;">
                                @Helper.ParseContent(message.Contenu)
                            </span>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="messagesHeader"><h4>Selectionnez un ami...</h4></div>
        }
    }
}
